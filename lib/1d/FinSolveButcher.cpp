#include <iostream>
#include <iomanip>
#include "dog_math.h"
#include "stdlib.h"
#include "dogdefs.h"
#include "IniParams.h"
#include "StateVars.h"
#include "FinSolveMD.h"

// Maximum number of stages that will be considered
#define MAX_STAGES (10)

// Functions to compute L = -f_x and L_t = (-f_{x})_t
//
void ConstructL ( const StateVars& Q, dTensorBC2& Lstar, dTensorBC1& smax);
void ConstructLt( const StateVars& Q, const dTensorBC2& F, dTensorBC1& smax, dTensorBC2& Ft);

// fhat(1:mx+1, meqn, mbc), fhat(i) = fhat_{i-1/2}.
void ConstructLFL( const StateVars& Q, dTensorBC2& fhat );
void ConstructLFFL( const StateVars& Q, dTensorBC2& Lstar, dTensorBC1& smax );

using namespace std;

// -------------------------------------------------------------------------- //
// Two-stage multiderivative time integration based on a Butcher Tableau
//
// This routine is designed to operate in the strict sandbox of using a single
// WENO reconstruction + alternatives to defining a second derivative.
//
// See also: FinSolveRK, FinSolveLxW, FinSolveSDC, and FinSolveUser other solvers.
// -------------------------------------------------------------------------- //
void FinSolveUser( StateVars& Qnew, double tend, double dtv[] )
{

    dTensorBC2& qnew = Qnew.ref_q  ();
    dTensorBC2&  aux = Qnew.ref_aux();

    // Time stepping information
    const double CFL_max        = global_ini_params.get_max_cfl();      // max CFL number
    const double CFL_target     = global_ini_params.get_desired_cfl();  // target CFL number
    double t                    = Qnew.get_t();
    double dt                   = dtv[1];   // Start with time step from last frame
    double cfl                  = 0.0;      // current CFL number
    double dtmin                = dt;       // Counters for max and min time step taken
    double dtmax                = dt;

    // WENO/Lax-Friedrich's reconstruction routine
    void (*LFunc)( const StateVars&, dTensorBC2&, dTensorBC1&);
    if( global_ini_params.get_space_order() > 1 )
    { 
        LFunc = &ConstructL; 
    }
    else
    { 
        LFunc = &ConstructLFFL; 
    }

    // Grid information
    const int mx     = qnew.getsize(1);
    const int meqn   = qnew.getsize(2);
    const int maux   = aux.getsize(2);
    const int mbc    = qnew.getmbc();
    const int numel  = qnew.numel();

    // Maximum wave speed
    dTensorBC1    smax(mx, mbc);

    // Needed for rejecting a time step
    StateVars Qold( t, mx, meqn, maux, mbc );
    dTensorBC2& qold   = Qold.ref_q();
    dTensorBC2& auxold = Qold.ref_aux();

    // Intermediate storage
    StateVars*  Qstar[MAX_STAGES];
    dTensorBC2* qstar[MAX_STAGES];
    dTensorBC2* auxstar[MAX_STAGES];
    dTensorBC2* Lstar [MAX_STAGES];
    dTensorBC2* Ltstar[MAX_STAGES];
    for( int i=0; i < MAX_STAGES; i++ )
    {
        Qstar  [i] = new StateVars(t, mx, meqn, maux, mbc );
        Lstar  [i] = new dTensorBC2( mx, meqn, mbc );
        Ltstar [i] = new dTensorBC2( mx, meqn, mbc );
        qstar  [i] = &Qstar[i]->ref_q();
        auxstar[i] = &Qstar[i]->ref_aux();
        Qstar[i]->copyfrom( Qnew );
    }

    // ---------------------------------- //
    // Two derivative Butcher tableaus
    // ---------------------------------- //

    // Two derivative Butcher Tableau (for now, we will use the TDRK4 version ...)
    const int s = 2;
    const double a [s][s] = { {0., 0.}, {0.5, 0.} }; 
    const double ah[s][s] = { {0., 0.}, {1./8., 0.} }; 
    const double b [s]    = { 1.0,   0.0 };
    const double bh[s]    = { 1./6., 1./3. };

    // Two derivative Butcher Tableau (Eqn. (25) from our paper)
//  const int s = 2;
//  const double a [s][s] = { {0., 0.}, {-1, 0.} }; 
//  const double ah[s][s] = { {0., 0.}, {1./2., 0.} }; 
//  const double b [s]    = { -1.0/3.0,   4.0/3.0 };
//  const double bh[s]    = { 4./3., 1./2. };

    // Taylor method
//  const int s = 1;
//  const double a [s][s] = { {0} };
//  const double ah[s][s] = { {0} };
//  const double b [s]    = { 1.0 };
//  const double bh[s]    = { 1./2. };

    // ---------------------------------- //
    // Single derivative Butcher tableaus
    // ---------------------------------- //

    // -- Classical RK4 -- //
//  const int s = 4;
//  const double a [s][s] = { 
//      {0.0, 0.0, 0.0, 0.0}, 
//      {0.5, 0.0, 0.0, 0.0},
//      {0.0, 0.5, 0.0, 0.0},
//      {0.0, 0.0, 1.0, 0.0} 
//  }; 
//  const double b[s]    = { 1./6., 1./3., 1./3., 1./6. };

//  const double ah[s][s] = { 
//      {0.0, 0.0, 0.0, 0.0}, 
//      {0.0, 0.0, 0.0, 0.0},
//      {0.0, 0.0, 0.0, 0.0},
//      {0.0, 0.0, 0.0, 0.0} 
//  }; 

//  const double bh[s] = { 0., 0., 0., 0. };

    // -- Forward Euler -- //
//  const int s = 1;
//  const double a [s][s] = { {0.0} }; 
//  const double b[s] = { 1.0 };
//  const double ah[s][s] = { {0.0} }; 
//  const double bh[s] = { 0. };

    // -- Dormand Prince 6s5p  -- //
//  const int s = 6;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.000000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.500000000000000e-02, 2.250000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.777777777777777e-01, -3.733333333333333e+00, 3.555555555555555e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.952598689224204e+00, -1.159579332418839e+01, 9.822892851699436e+00, -2.908093278463649e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.846275252525253e+00, -1.075757575757576e+01, 8.906422717743473e+00, 2.784090909090909e-01, -2.735313036020583e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00 } }; 

//  const double b[s] = { 9.114583333333333e-02, 0.000000000000000e+00, 4.492362982929021e-01, 6.510416666666666e-01, -3.223761792452830e-01, 1.309523809523810e-01, }; 
//  const double bh[s] = { 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, }; 


    // -- Verner 8s6p KashinType -- //
//  const int s = 8;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.000000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.500000000000000e-01, 2.500000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-4.803206997084548e-01, 1.043002915451895e+00, -4.198250728862974e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.808641975308642e-01, 2.503429355281207e-02, -6.172839506172839e-03, 3.360768175582991e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-5.321772006246404e-03, -3.172381519029258e+00, 7.759835049188646e-01, -2.306643177137493e-01, 3.371514538612998e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.666666666666667e-01, 6.958689458689459e+00, -1.858723958333333e+00, 7.992983217592593e-01, -6.066964285714286e+00, 1.001033796932234e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-1.250000000000000e+00, -3.333333333333333e-01, -6.175048828125000e+00, -4.183024088541666e-01, 4.890736607142857e+00, 4.285947963169643e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 8.333333333333333e-02, -5.638651471984806e-01, 1.932779947916667e-01, 2.532883632330247e-02, 8.588169642857143e-01, 3.197746851311304e-01, 8.333333333333333e-02, 0.000000000000000e+00, }; 
//  const double bh[s] = { 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // ---------------------------------- //
    // Methods to Test
    // ---------------------------------- //

    // 5s5p0.7KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 5;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.285004358540495e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.478285358395006e-01, 4.046572628141799e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.071196697052616e-01, 8.884707532831768e-02, 2.066403098193889e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.087111951443929e-01, 5.274357838777523e-02, 1.226708852121261e-01, 5.587090453286975e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.180631176355518e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.947304523498293e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.666753190194387e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.144970440111030e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.507521408826423e-01, 2.083955417013337e-01, 6.498372484542536e-02, 2.959556420642334e-01, 1.799129505063652e-01, }; 
//  const double bh[s] = { 2.032833066466483e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 6s5p0.9KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 6;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.489815850205124e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.162125301018396e-01, 3.233534959963535e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.126795138094930e-01, 8.832739227756309e-02, 1.500223640966569e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.734430913246906e-01, 4.884056869237505e-02, 8.295475944801013e-02, 3.036850832498127e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.213368125954134e-01, 3.953369510031399e-02, 6.714721500877030e-02, 2.458160052011413e-01, 4.445543387559777e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.007922318437658e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.934258571515055e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.621004848293375e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.963334771047771e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.255315681366392e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.760604538144036e-01, 1.342780977559266e-01, 9.280117355399514e-02, 1.705502063549058e-01, 2.280465796687140e-01, 9.826348885205491e-02, }; 
//  const double bh[s] = { 2.464302883503788e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 8s6p0.9KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 8;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.498630949258150e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.253295269463227e-01, 1.807161013759724e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.071695605568409e-01, 4.100178308548576e-02, 1.306253212278126e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.667117585911237e-01, 2.009667996165993e-02, 6.402490521280881e-02, 2.821909187189924e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.493141923275556e-01, 1.319303489675465e-02, 4.203095914776495e-02, 1.852522020371737e-01, 3.779563241192044e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.148681581922796e-01, 1.533420472452636e-01, 1.813808417863181e-02, 7.994387176143736e-02, 1.630752796649391e-01, 2.484093806816690e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.036762412289922e-01, 1.456707401767411e-01, 2.379744031395224e-02, 1.048777345557326e-01, 2.139668745571685e-01, 6.560681670556633e-02, 1.520556075200664e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {6.120209259553491e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.921063160949869e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.358605297856505e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.136333816692593e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.402456855983780e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.631142330728269e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.548804492637956e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 1.927179349665056e-01, 7.457643792836192e-02, 1.097549250079706e-01, 1.166274027628658e-01, 1.862061970475841e-01, 1.088089628270683e-01, 4.414821350738243e-02, 1.671599259522612e-01, }; 
//  const double bh[s] = { 1.156518516980132e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 5s5p0.8KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 5;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.285031764238579e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.478324046849652e-01, 4.046513231702588e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.071197564436330e-01, 8.884659797952246e-02, 2.066413978481272e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.087113946066820e-01, 5.274348182494325e-02, 1.226719656074573e-01, 5.587087668837365e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.180748610266794e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.947313023535209e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.666852502884431e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.145047619839194e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.507535451601352e-01, 2.083941988057676e-01, 6.498203963912934e-02, 2.959582077383011e-01, 1.799120086566668e-01, }; 
//  const double bh[s] = { 2.032854183029775e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 6s5p1KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 6;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.490017754223744e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.162314619369681e-01, 3.233190156504587e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.126812991943991e-01, 8.832160844380504e-02, 1.500285382202944e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.734451979098244e-01, 4.883709613329947e-02, 8.295770732554890e-02, 3.036833765338500e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.213385075089886e-01, 3.953088242852313e-02, 6.714959804070045e-02, 2.458146123284969e-01, 4.445543174922684e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.008012971662222e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.934159463628244e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.621044489249268e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.963503603785949e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.255452006027507e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.760658488033245e-01, 1.342704110542858e-01, 9.280334403332846e-02, 1.705557166980362e-01, 2.280397510237693e-01, 9.826492838725576e-02, }; 
//  const double bh[s] = { 2.464383447537299e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 8s6p1KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 8;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.498630949258150e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.253295269463227e-01, 1.807161013759724e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.071695605568409e-01, 4.100178308548576e-02, 1.306253212278126e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.667117585911237e-01, 2.009667996165993e-02, 6.402490521280881e-02, 2.821909187189924e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.493141923275556e-01, 1.319303489675465e-02, 4.203095914776495e-02, 1.852522020371737e-01, 3.779563241192044e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.148681581922796e-01, 1.533420472452636e-01, 1.813808417863181e-02, 7.994387176143736e-02, 1.630752796649391e-01, 2.484093806816690e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.036762412289922e-01, 1.456707401767411e-01, 2.379744031395224e-02, 1.048777345557326e-01, 2.139668745571685e-01, 6.560681670556633e-02, 1.520556075200664e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {6.120209259553491e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.921063160949869e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.358605297856505e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.136333816692593e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.402456855983780e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.631142330728269e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.548804492637956e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 1.927179349665056e-01, 7.457643792836192e-02, 1.097549250079706e-01, 1.166274027628658e-01, 1.862061970475841e-01, 1.088089628270683e-01, 4.414821350738243e-02, 1.671599259522612e-01, }; 
//  const double bh[s] = { 1.156518516980132e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 5s5p0.9KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 5;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.285034779931227e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.478328304027428e-01, 4.046506695809700e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.071197659865607e-01, 8.884654545286934e-02, 2.066415175779362e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.087114165553897e-01, 5.274347119888836e-02, 1.226720844948110e-01, 5.587087362451355e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.180761532610131e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.947313958780632e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.666863431085359e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.145056112560054e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.507536996841891e-01, 2.083940510366409e-01, 6.498185419667678e-02, 2.959584900698231e-01, 1.799119050126700e-01, }; 
//  const double bh[s] = { 2.032856506664393e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 7s6p0.7KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 7;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.847721608920666e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.118183552818879e-01, 1.280849449374047e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.439480604180736e-01, 3.665437383603174e-02, 3.199938627198011e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.115982579954571e-01, 9.727767733725239e-03, 8.492372524710383e-02, 2.967572361435870e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.544564967923210e-01, 3.714229419302582e-03, 3.242534231322441e-02, 1.132217219615547e-01, 4.266211361883351e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.872238569052484e-01, 1.316749599699016e-01, 1.352092638469073e-01, 1.761876909723855e-01, 7.158236996863511e-02, 1.866405864234583e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.402480789877518e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.483605708676734e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.427773656578480e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {6.443110540340358e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.842989180007759e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.175264801319142e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 1.977719666077534e-01, 5.379662712209771e-02, 1.217561210909331e-01, 3.199703040462903e-01, 1.612088412009495e-02, 4.156475637104592e-02, 2.490193406417846e-01, }; 
//  const double bh[s] = { 1.224295355840810e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 5s5p1KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 5;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.285027051552892e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.478315931683704e-01, 4.046525495737592e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.071195832358321e-01, 8.884745162796144e-02, 2.066405448926440e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.087113328432868e-01, 5.274388239051506e-02, 1.226711751546299e-01, 5.587088447593672e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.180728416270033e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.947306612462528e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.666895431177102e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.145062744478901e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.507532160556402e-01, 2.083946401225475e-01, 6.498120173227381e-02, 2.959584589338262e-01, 1.799124831557123e-01, }; 
//  const double bh[s] = { 2.032849025229089e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 7s6p1KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 7;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.847866476097463e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.118458490450441e-01, 1.281425636074837e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.440368078938072e-01, 3.667413985994732e-02, 3.198859753997249e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.116227180437509e-01, 9.735273193331503e-03, 8.491480299535863e-02, 2.966995622498092e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.544334848605176e-01, 3.717424412647025e-03, 3.242477273077353e-02, 1.132378800127740e-01, 4.265829805755632e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.872455605416139e-01, 1.316122311345677e-01, 1.352112668736855e-01, 1.764470568468749e-01, 7.126592642274149e-02, 1.867269716505558e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.403038208937356e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.488512902350420e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.429395398727191e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {6.448911609190366e-04, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.842046733407571e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.175357129252924e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 1.978030829058975e-01, 5.380333098301094e-02, 1.216840178849888e-01, 3.201808297513337e-01, 1.589148143624435e-02, 4.160405047867565e-02, 2.490332065598491e-01, }; 
//  const double bh[s] = { 1.224626996195988e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 6s5p0.8KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 6;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.395567524128431e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.069220413850502e-01, 3.391955889949869e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.117042180917802e-01, 9.131610042360759e-02, 1.479183760324461e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.734807832160820e-01, 5.009777394384891e-02, 8.115087405439560e-02, 3.014366403585771e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.211128023357503e-01, 4.050470770648271e-02, 6.561154668035842e-02, 2.437154797223766e-01, 4.442342537227400e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.660506929586272e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {5.963828461255921e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.605544341808235e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {8.808325927148392e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.121647110757245e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 2.732726217308048e-01, 1.377148002725350e-01, 9.351733765139010e-02, 1.680932034454094e-01, 2.270156167764187e-01, 1.003864201234419e-01, }; 
//  const double bh[s] = { 2.421338814679153e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

    // 8s6p0.8KTaylorSeriesSimplifiedMDRKC2.mat 
//  const int s = 8;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.498630949258150e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.253295269463227e-01, 1.807161013759724e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.071695605568409e-01, 4.100178308548576e-02, 1.306253212278126e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.667117585911237e-01, 2.009667996165993e-02, 6.402490521280881e-02, 2.821909187189924e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.493141923275556e-01, 1.319303489675465e-02, 4.203095914776495e-02, 1.852522020371737e-01, 3.779563241192044e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.148681581922796e-01, 1.533420472452636e-01, 1.813808417863181e-02, 7.994387176143736e-02, 1.630752796649391e-01, 2.484093806816690e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.036762412289922e-01, 1.456707401767411e-01, 2.379744031395224e-02, 1.048777345557326e-01, 2.139668745571685e-01, 6.560681670556633e-02, 1.520556075200664e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {6.120209259553491e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.921063160949869e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.358605297856505e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.136333816692593e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.402456855983780e-03, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.631142330728269e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.548804492637956e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 1.927179349665056e-01, 7.457643792836192e-02, 1.097549250079706e-01, 1.166274027628658e-01, 1.862061970475841e-01, 1.088089628270683e-01, 4.414821350738243e-02, 1.671599259522612e-01, }; 
//  const double bh[s] = { 1.156518516980132e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 

//  // DormandPrince6s5p.mat 
//  const int s = 6;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.000000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {7.500000000000000e-02, 2.250000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {9.777777777777777e-01, -3.733333333333333e+00, 3.555555555555555e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.952598689224204e+00, -1.159579332418839e+01, 9.822892851699436e+00, -2.908093278463649e-01, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.846275252525253e+00, -1.075757575757576e+01, 8.906422717743473e+00, 2.784090909090909e-01, -2.735313036020583e-01, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 9.114583333333333e-02, 0.000000000000000e+00, 4.492362982929021e-01, 6.510416666666666e-01, -3.223761792452830e-01, 1.309523809523810e-01, }; 
//  const double bh[s] = { 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, }; 

//  // Verner8s6pKhashinType.mat 
//  const int s = 8;
//  const double a[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {4.000000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {3.500000000000000e-01, 2.500000000000000e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-4.803206997084548e-01, 1.043002915451895e+00, -4.198250728862974e-01, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {2.808641975308642e-01, 2.503429355281207e-02, -6.172839506172839e-03, 3.360768175582991e-02, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-5.321772006246404e-03, -3.172381519029258e+00, 7.759835049188646e-01, -2.306643177137493e-01, 3.371514538612998e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {1.666666666666667e-01, 6.958689458689459e+00, -1.858723958333333e+00, 7.992983217592593e-01, -6.066964285714286e+00, 1.001033796932234e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-1.250000000000000e+00, -3.333333333333333e-01, -6.175048828125000e+00, -4.183024088541666e-01, 4.890736607142857e+00, 4.285947963169643e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double ah[s][s] = {  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 },  {-0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00 } }; 
//  const double b[s] = { 8.333333333333333e-02, -5.638651471984806e-01, 1.932779947916667e-01, 2.532883632330247e-02, 8.588169642857143e-01, 3.197746851311304e-01, 8.333333333333333e-02, 0.000000000000000e+00, }; 
//  const double bh[s] = { 0.000000000000000e+00, -0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, 0.000000000000000e+00, }; 


    // ---------------------------------------------- //
    // -- MAIN TIME STEPPING LOOP (for this frame) -- //
    // ---------------------------------------------- //
    int n_step   = 0;
    const int nv = global_ini_params.get_nv();  // Maximum allowable time steps
    while (t<tend)
    {
        // initialize time step
        int m_accept = 0;      
        n_step = n_step + 1;

        // check if max number of time steps exceeded
        if( n_step > nv )
        {
            cout << " Error in FinSolveUser.cpp: "<< 
                " Exceeded allowed # of time steps " << endl;
            cout << "    n_step = " << n_step << endl;
            cout << "        nv = " << nv << endl;
            cout << endl;
            exit(1);
        }        

        // copy qnew into qold
        Qold.copyfrom( Qnew );

        // keep trying until we get time step that doesn't violate CFL condition
        while (m_accept==0)
        {

            // set current time
            Qnew.set_t( t );
            double told = t;
            if (told+dt > tend)
            { dt = tend - told; }
            t = told + dt;

            // Set initial maximum wave speed to zero
            smax.setall(0.);

            // ----------------------------------------------------------------
            BeforeFullTimeStep(dt, Qold, Qnew );
            SetBndValues( Qnew  );

            // -------------------------------------------------------------- //
            // Take a single time step
            // -------------------------------------------------------------- //

            // First stage
            Qstar[0]->copyfrom( Qnew );

            for( int i=0; i < s; i++ )
            {
                // Want: Qstar[i] = Qn 
                //                  + dt   * sum_{j=0}^{i-1} a {ij} F ( Qstar[i] )
                //                  + dt^2 * sum_{j=0}^{i-1} ah{ij} Ft( Qstar[i] )

                Qnew.copyfrom( Qold );
                for( int j=0; j < i; j++ )
                {
#pragma omp parallel for
                    for( int k=0; k < numel; k++ )
                    {
                        double tmp = qnew.vget( k ) + dt*( a[i][j]*Lstar[j]->vget(k) + ah[i][j]*dt*Ltstar[j]->vget(k) );
                        qnew.vset(k, tmp );
                    }
                }

                SetBndValues( Qnew  );

// Remove this
ConSoln( Qnew );

                // New function evaluation:
                LFunc( Qnew, *Lstar[i], smax);

                // TODO - this sets the boundary conditions on the flux and not
                // the conserved variables ...
                SetBndValues( *Lstar[i] );

                // New function evaluation:
                ConstructLt( Qnew, *Lstar[i], smax, *Ltstar[i] );

                // TODO - this sets the boundary conditions on time derivative 
                // of flux and not the conserved variables ...
                SetBndValues( *Ltstar[i] );

            }

            // Update the solution
            Qnew.copyfrom( Qold );
            for( int i=0; i < s; i++ )
            {
#pragma omp parallel for
                for( int k=0; k < numel; k++ )
                {
                    double tmp = qnew.vget( k ) + dt*(b[i]*Lstar[i]->vget(k) + bh[i]*dt*Ltstar[i]->vget(k) );
                    qnew.vset(k, tmp );
                }
            }
            Qnew.set_t( Qnew.get_t() + dt );
            SetBndValues( Qnew  );

            // do any extra work      
            AfterFullTimeStep(dt, Qold, Qnew );

            // compute cfl number
            cfl = GetCFL(dt,dtv[2],aux,smax);

            // output time step information
            if( global_ini_params.get_verbosity() )
            {
                cout << setprecision(3);
                cout << "FinSolve1D ... Step" << setw(5) << n_step;
                cout << "   CFL =" << setw(6) << fixed << cfl;
                cout << "   dt =" << setw(11) << scientific << dt;
                cout << "   t =" << setw(11) << scientific << t <<endl;
            }

            // choose new time step
            if (cfl>0.0)
            {   
                dt = Min(dtv[2],dt*CFL_target/cfl);
                dtmin = Min(dt,dtmin);
                dtmax = Max(dt,dtmax);
            }
            else
            {
                dt = dtv[2];
            }

            // see whether to accept or reject this step
            if (cfl<=CFL_max)
            // accept
            { m_accept = 1; }
            else 
            //reject
            {   
                t = told;
                if( global_ini_params.get_verbosity() )
                {
                    cout<<"FinSolve1D rejecting step...";
                    cout<<"CFL number too large";
                    cout<<endl;
                }

                // copy qold into qnew
                Qnew.copyfrom( Qold  );
            }

        }

        // compute conservation and print to file
        SetBndValues( Qnew );
        ConSoln     ( Qnew );

    }

    // set initial time step for next call to FinSolve
    dtv[1] = dt;

    for ( int i=0; i < MAX_STAGES; i++ )
    {
        delete Qstar [i];
        delete Lstar [i];
        delete Ltstar[i];
    }

}

void ConstructLFFL( const StateVars& Q, dTensorBC2& Lstar, dTensorBC1& smax )
{

    // Needed for rejecting a time step
    const dTensorBC2& q   = Q.const_ref_q();
    const dTensorBC2& aux = Q.const_ref_aux();

    // Grid information
    const int mx     = q.getsize(1);
    const int meqn   = q.getsize(2);
    const int maux   = aux.getsize(2);
    const int mbc    = q.getmbc();
    const int numel  = q.numel();

    dTensorBC2  fhat(mx+1, meqn, mbc );
    void ConstructLFL( const StateVars& Q, dTensorBC2& fhat );
    ConstructLFL( Q, fhat );

    double alpha1 = 0.;
    void GlobalWaveSpd( const dTensorBC2& q, const dTensorBC2& aux, double& alpha1 );
    GlobalWaveSpd( q, aux, alpha1 );
    smax.setall( alpha1 );

    const double one_over_dx = 1.0/global_ini_params.get_dx();
#pragma omp parallel for
    for (int i=1; i<=mx; i++)
    {
        for (int m=1; m<=meqn; m++)
        {
            Lstar.set(i,m, -(fhat.get(i+1,m)-fhat.get(i,m))*one_over_dx );
        }
    }

}


