#ifndef _CENTRAL_DIFFERENCES_H_
#define _CENTRAL_DIFFERENCES_H_

// -- Reconstructions based on linear weights -- //
//
// There's no need to call these directly.  In place of extra overhead for
// checking which method to use inside a for loop, instead use
// GetCentralDifferences one time.
void CentralDifferences5 ( double dx, const dTensor2& f, dTensor2& fderivs   );
void CentralDifferences7 ( double dx, const dTensor2& f, dTensor2& fderivs   );
void CentralDifferences9 ( double dx, const dTensor2& f, dTensor2& fderivs   );
void CentralDifferences11( double dx, const dTensor2& f, dTensor2& fderivs   );

// Wrapper function that provides access to each of the above through looking
// at the global variable wenoParams.
//void (*GetWenoReconstruct())(const dTensor2& g, dTensor2& g_reconst);
typedef void (*central_differences_t)(double, const dTensor2&, dTensor2&);
central_differences_t GetCentralDifferences();

// Matrices used for computing derivatives.  
//
// See $FINESS/symbolic_tools/construct-central-difference-code.py or
// http://en.wikipedia.org/wiki/Finite_difference_coefficient
// for more details.
const double deriv_matrix5[4][5] = {
    { 8.3333333333333328707404064e-02, -6.6666666666666662965923251e-01, 0.0000000000000000000000000e+00, 6.6666666666666662965923251e-01, -8.3333333333333328707404064e-02 },
    { -8.3333333333333328707404064e-02, 1.3333333333333332593184650e+00, -2.5000000000000000000000000e+00, 1.3333333333333332593184650e+00, -8.3333333333333328707404064e-02 },
    { -5.0000000000000000000000000e-01, 1.0000000000000000000000000e+00, 0.0000000000000000000000000e+00, -1.0000000000000000000000000e+00, 5.0000000000000000000000000e-01 },
    { 1.0000000000000000000000000e+00, -4.0000000000000000000000000e+00, 6.0000000000000000000000000e+00, -4.0000000000000000000000000e+00, 1.0000000000000000000000000e+00 }
};

const double deriv_matrix7[6][7] = {
    { -1.6666666666666666435370203e-02, 1.4999999999999999444888488e-01, -7.5000000000000000000000000e-01, 0.0000000000000000000000000e+00, 7.5000000000000000000000000e-01, -1.4999999999999999444888488e-01, 1.6666666666666666435370203e-02 },
    { 1.1111111111111111535154627e-02, -1.4999999999999999444888488e-01, 1.5000000000000000000000000e+00, -2.7222222222222223209087133e+00, 1.5000000000000000000000000e+00, -1.4999999999999999444888488e-01, 1.1111111111111111535154627e-02 },
    { 1.2500000000000000000000000e-01, -1.0000000000000000000000000e+00, 1.6250000000000000000000000e+00, 0.0000000000000000000000000e+00, -1.6250000000000000000000000e+00, 1.0000000000000000000000000e+00, -1.2500000000000000000000000e-01 },
    { -1.6666666666666665741480813e-01, 2.0000000000000000000000000e+00, -6.5000000000000000000000000e+00, 9.3333333333333339254522798e+00, -6.5000000000000000000000000e+00, 2.0000000000000000000000000e+00, -1.6666666666666665741480813e-01 },
    { -5.0000000000000000000000000e-01, 2.0000000000000000000000000e+00, -2.5000000000000000000000000e+00, 0.0000000000000000000000000e+00, 2.5000000000000000000000000e+00, -2.0000000000000000000000000e+00, 5.0000000000000000000000000e-01 },
    { 1.0000000000000000000000000e+00, -6.0000000000000000000000000e+00, 1.5000000000000000000000000e+01, -2.0000000000000000000000000e+01, 1.5000000000000000000000000e+01, -6.0000000000000000000000000e+00, 1.0000000000000000000000000e+00 }
};

const double deriv_matrix9[8][9] = {
    { 3.5714285714285713170534908e-03, -3.8095238095238098674499838e-02, 2.0000000000000001110223025e-01, -8.0000000000000004440892099e-01, 0.0000000000000000000000000e+00, 8.0000000000000004440892099e-01, -2.0000000000000001110223025e-01, 3.8095238095238098674499838e-02, -3.5714285714285713170534908e-03 },
    { -1.7857142857142856585267454e-03, 2.5396825396825396803368591e-02, -2.0000000000000001110223025e-01, 1.6000000000000000888178420e+00, -2.8472222222222223209087133e+00, 1.6000000000000000888178420e+00, -2.0000000000000001110223025e-01, 2.5396825396825396803368591e-02, -1.7857142857142856585267454e-03 },
    { -2.9166666666666667129259594e-02, 2.9999999999999998889776975e-01, -1.4083333333333334369541490e+00, 2.0333333333333332149095440e+00, 0.0000000000000000000000000e+00, -2.0333333333333332149095440e+00, 1.4083333333333334369541490e+00, -2.9999999999999998889776975e-01, 2.9166666666666667129259594e-02 },
    { 2.9166666666666667129259594e-02, -4.0000000000000002220446049e-01, 2.8166666666666668739082979e+00, -8.1333333333333328596381762e+00, 1.1375000000000000000000000e+01, -8.1333333333333328596381762e+00, 2.8166666666666668739082979e+00, -4.0000000000000002220446049e-01, 2.9166666666666667129259594e-02 },
    { 1.6666666666666665741480813e-01, -1.5000000000000000000000000e+00, 4.3333333333333330372738601e+00, -4.8333333333333330372738601e+00, 0.0000000000000000000000000e+00, 4.8333333333333330372738601e+00, -4.3333333333333330372738601e+00, 1.5000000000000000000000000e+00, -1.6666666666666665741480813e-01 },
    { -2.5000000000000000000000000e-01, 3.0000000000000000000000000e+00, -1.3000000000000000000000000e+01, 2.9000000000000000000000000e+01, -3.7500000000000000000000000e+01, 2.9000000000000000000000000e+01, -1.3000000000000000000000000e+01, 3.0000000000000000000000000e+00, -2.5000000000000000000000000e-01 },
    { -5.0000000000000000000000000e-01, 3.0000000000000000000000000e+00, -7.0000000000000000000000000e+00, 7.0000000000000000000000000e+00, 0.0000000000000000000000000e+00, -7.0000000000000000000000000e+00, 7.0000000000000000000000000e+00, -3.0000000000000000000000000e+00, 5.0000000000000000000000000e-01 },
    { 1.0000000000000000000000000e+00, -8.0000000000000000000000000e+00, 2.8000000000000000000000000e+01, -5.6000000000000000000000000e+01, 7.0000000000000000000000000e+01, -5.6000000000000000000000000e+01, 2.8000000000000000000000000e+01, -8.0000000000000000000000000e+00, 1.0000000000000000000000000e+00 }
};

const double deriv_matrix11[10][11] = {
    { -7.9365079365079365010526846e-04, 9.9206349206349200842147695e-03, -5.9523809523809520505288617e-02, 2.3809523809523808202115447e-01, -8.3333333333333337034076749e-01, 0.0000000000000000000000000e+00, 8.3333333333333337034076749e-01, -2.3809523809523808202115447e-01, 5.9523809523809520505288617e-02, -9.9206349206349200842147695e-03, 7.9365079365079365010526846e-04 },
    { 3.1746031746031746004210738e-04, -4.9603174603174600421073848e-03, 3.9682539682539680336859078e-02, -2.3809523809523808202115447e-01, 1.6666666666666667406815350e+00, -2.9272222222222223919629869e+00, 1.6666666666666667406815350e+00, -2.3809523809523808202115447e-01, 3.9682539682539680336859078e-02, -4.9603174603174600421073848e-03, 3.1746031746031746004210738e-04 },
    { 6.7791005291005287242134258e-03, -8.3399470899470903861860904e-02, 4.8303571428571429047238439e-01, -1.7337301587301587879608178e+00, 2.3180555555555555358182573e+00, 0.0000000000000000000000000e+00, -2.3180555555555555358182573e+00, 1.7337301587301587879608178e+00, -4.8303571428571429047238439e-01, 8.3399470899470903861860904e-02, -6.7791005291005287242134258e-03 },
    { -5.4232804232804236732601311e-03, 8.3399470899470903861860904e-02, -6.4404761904761909097061334e-01, 3.4674603174603175759216356e+00, -9.2722222222222221432730294e+00, 1.2741666666666667140361824e+01, -9.2722222222222221432730294e+00, 3.4674603174603175759216356e+00, -6.4404761904761909097061334e-01, 8.3399470899470903861860904e-02, -5.4232804232804236732601311e-03 },
    { -4.5138888888888888117900677e-02, 5.2777777777777779011358916e-01, -2.7187500000000000000000000e+00, 6.5000000000000000000000000e+00, -6.7291666666666669627261399e+00, 0.0000000000000000000000000e+00, 6.7291666666666669627261399e+00, -6.5000000000000000000000000e+00, 2.7187500000000000000000000e+00, -5.2777777777777779011358916e-01, 4.5138888888888888117900677e-02 },
    { 5.4166666666666668517038374e-02, -7.9166666666666662965923251e-01, 5.4375000000000000000000000e+00, -1.9500000000000000000000000e+01, 4.0375000000000000000000000e+01, -5.1149999999999998578914528e+01, 4.0375000000000000000000000e+01, -1.9500000000000000000000000e+01, 5.4375000000000000000000000e+00, -7.9166666666666662965923251e-01, 5.4166666666666668517038374e-02 },
    { 2.0833333333333334258519187e-01, -2.1666666666666665186369300e+00, 8.6250000000000000000000000e+00, -1.7000000000000000000000000e+01, 1.5750000000000000000000000e+01, 0.0000000000000000000000000e+00, -1.5750000000000000000000000e+01, 1.7000000000000000000000000e+01, -8.6250000000000000000000000e+00, 2.1666666666666665186369300e+00, -2.0833333333333334258519187e-01 },
    { -3.3333333333333331482961626e-01, 4.3333333333333330372738601e+00, -2.3000000000000000000000000e+01, 6.8000000000000000000000000e+01, -1.2600000000000000000000000e+02, 1.5400000000000000000000000e+02, -1.2600000000000000000000000e+02, 6.8000000000000000000000000e+01, -2.3000000000000000000000000e+01, 4.3333333333333330372738601e+00, -3.3333333333333331482961626e-01 },
    { -5.0000000000000000000000000e-01, 4.0000000000000000000000000e+00, -1.3500000000000000000000000e+01, 2.4000000000000000000000000e+01, -2.1000000000000000000000000e+01, 0.0000000000000000000000000e+00, 2.1000000000000000000000000e+01, -2.4000000000000000000000000e+01, 1.3500000000000000000000000e+01, -4.0000000000000000000000000e+00, 5.0000000000000000000000000e-01 },
    { 1.0000000000000000000000000e+00, -1.0000000000000000000000000e+01, 4.5000000000000000000000000e+01, -1.2000000000000000000000000e+02, 2.1000000000000000000000000e+02, -2.5200000000000000000000000e+02, 2.1000000000000000000000000e+02, -1.2000000000000000000000000e+02, 4.5000000000000000000000000e+01, -1.0000000000000000000000000e+01, 1.0000000000000000000000000e+00 }
};

// Old version of the same matrix
//  const double deriv_matrix5[4][5] = {
//     { 8.333333333333333e-02, -6.666666666666666e-01,  0, 6.666666666666666e-01,  -8.333333333333333e-02 },   // first-deriv
//     {-8.333333333333333e-02,  1.3333333333333333, -2.5, 1.3333333333333333, -8.333333333333333e-02},  // second-deriv
//     {-0.5,     1.0,    0.0,  -1.0,    0.5},     // third-deriv
//     {1.0,    -4.0,    6.0,  -4.0,    1.0}       // fourth-deriv
//  };

#endif
