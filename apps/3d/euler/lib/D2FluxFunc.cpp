#include <cmath>
#include "tensors.h"
#include "IniParams.h"


void D2FluxFunc(const dTensor2& xpts, 
        const dTensor2& Q,
        const dTensor2& Aux,
        dTensor5& D2flux)
{
    using std::pow;
    const int numpts = xpts.getsize(1);
    const int meqn   = Q.getsize(2);

    const double gamma = global_ini_params.get_gamma();

    D2flux.setall(0.);
    for (int i=1; i<=numpts; i++)
    {
        double q1 = Q.get(i,1);
        double q2 = Q.get(i,2);
        double q3 = Q.get(i,3);
        double q4 = Q.get(i,4);
        double q5 = Q.get(i,5);

        //****HESSIAN*****
        //Computing the Hessian of the flux function: f''(q)

        D2flux.set(i,1,1,1,1, 0);
        D2flux.set(i,1,1,2,1, 0);
        D2flux.set(i,1,1,3,1, 0);
        D2flux.set(i,1,1,4,1, 0);
        D2flux.set(i,1,1,5,1, 0);
        D2flux.set(i,1,2,1,1, 0);
        D2flux.set(i,1,2,2,1, 0);
        D2flux.set(i,1,2,3,1, 0);
        D2flux.set(i,1,2,4,1, 0);
        D2flux.set(i,1,2,5,1, 0);
        D2flux.set(i,1,3,1,1, 0);
        D2flux.set(i,1,3,2,1, 0);
        D2flux.set(i,1,3,3,1, 0);
        D2flux.set(i,1,3,4,1, 0);
        D2flux.set(i,1,3,5,1, 0);
        D2flux.set(i,1,4,1,1, 0);
        D2flux.set(i,1,4,2,1, 0);
        D2flux.set(i,1,4,3,1, 0);
        D2flux.set(i,1,4,4,1, 0);
        D2flux.set(i,1,4,5,1, 0);
        D2flux.set(i,1,5,1,1, 0);
        D2flux.set(i,1,5,2,1, 0);
        D2flux.set(i,1,5,3,1, 0);
        D2flux.set(i,1,5,4,1, 0);
        D2flux.set(i,1,5,5,1, 0);

        D2flux.set(i,2,1,1,1, -gamma*pow( q2, 2 )/pow( q1, 3 ) - gamma*pow( q3, 2 )/pow( q1, 3 ) - gamma*pow( q4, 2 )/pow( q1, 3 ) + 3*pow( q2, 2 )/pow( q1, 3 ) + pow( q3, 2 )/pow( q1, 3 ) + pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,2,1,2,1, gamma*q2/pow( q1, 2 ) - 3*q2/pow( q1, 2 ));
        D2flux.set(i,2,1,3,1, gamma*q3/pow( q1, 2 ) - q3/pow( q1, 2 ));
        D2flux.set(i,2,1,4,1, gamma*q4/pow( q1, 2 ) - q4/pow( q1, 2 ));
        D2flux.set(i,2,1,5,1, 0);
        D2flux.set(i,2,2,1,1, gamma*q2/pow( q1, 2 ) - 3*q2/pow( q1, 2 ));
        D2flux.set(i,2,2,2,1, -gamma/q1 + 3/q1);
        D2flux.set(i,2,2,3,1, 0);
        D2flux.set(i,2,2,4,1, 0);
        D2flux.set(i,2,2,5,1, 0);
        D2flux.set(i,2,3,1,1, gamma*q3/pow( q1, 2 ) - q3/pow( q1, 2 ));
        D2flux.set(i,2,3,2,1, 0);
        D2flux.set(i,2,3,3,1, -gamma/q1 + 1/q1);
        D2flux.set(i,2,3,4,1, 0);
        D2flux.set(i,2,3,5,1, 0);
        D2flux.set(i,2,4,1,1, gamma*q4/pow( q1, 2 ) - q4/pow( q1, 2 ));
        D2flux.set(i,2,4,2,1, 0);
        D2flux.set(i,2,4,3,1, 0);
        D2flux.set(i,2,4,4,1, -gamma/q1 + 1/q1);
        D2flux.set(i,2,4,5,1, 0);
        D2flux.set(i,2,5,1,1, 0);
        D2flux.set(i,2,5,2,1, 0);
        D2flux.set(i,2,5,3,1, 0);
        D2flux.set(i,2,5,4,1, 0);
        D2flux.set(i,2,5,5,1, 0);

        D2flux.set(i,3,1,1,1, 2*q2*q3/pow( q1, 3 ));
        D2flux.set(i,3,1,2,1, -q3/pow( q1, 2 ));
        D2flux.set(i,3,1,3,1, -q2/pow( q1, 2 ));
        D2flux.set(i,3,1,4,1, 0);
        D2flux.set(i,3,1,5,1, 0);
        D2flux.set(i,3,2,1,1, -q3/pow( q1, 2 ));
        D2flux.set(i,3,2,2,1, 0);
        D2flux.set(i,3,2,3,1, 1/q1);
        D2flux.set(i,3,2,4,1, 0);
        D2flux.set(i,3,2,5,1, 0);
        D2flux.set(i,3,3,1,1, -q2/pow( q1, 2 ));
        D2flux.set(i,3,3,2,1, 1/q1);
        D2flux.set(i,3,3,3,1, 0);
        D2flux.set(i,3,3,4,1, 0);
        D2flux.set(i,3,3,5,1, 0);
        D2flux.set(i,3,4,1,1, 0);
        D2flux.set(i,3,4,2,1, 0);
        D2flux.set(i,3,4,3,1, 0);
        D2flux.set(i,3,4,4,1, 0);
        D2flux.set(i,3,4,5,1, 0);
        D2flux.set(i,3,5,1,1, 0);
        D2flux.set(i,3,5,2,1, 0);
        D2flux.set(i,3,5,3,1, 0);
        D2flux.set(i,3,5,4,1, 0);
        D2flux.set(i,3,5,5,1, 0);

        D2flux.set(i,4,1,1,1, 2*q2*q4/pow( q1, 3 ));
        D2flux.set(i,4,1,2,1, -q4/pow( q1, 2 ));
        D2flux.set(i,4,1,3,1, 0);
        D2flux.set(i,4,1,4,1, -q2/pow( q1, 2 ));
        D2flux.set(i,4,1,5,1, 0);
        D2flux.set(i,4,2,1,1, -q4/pow( q1, 2 ));
        D2flux.set(i,4,2,2,1, 0);
        D2flux.set(i,4,2,3,1, 0);
        D2flux.set(i,4,2,4,1, 1/q1);
        D2flux.set(i,4,2,5,1, 0);
        D2flux.set(i,4,3,1,1, 0);
        D2flux.set(i,4,3,2,1, 0);
        D2flux.set(i,4,3,3,1, 0);
        D2flux.set(i,4,3,4,1, 0);
        D2flux.set(i,4,3,5,1, 0);
        D2flux.set(i,4,4,1,1, -q2/pow( q1, 2 ));
        D2flux.set(i,4,4,2,1, 1/q1);
        D2flux.set(i,4,4,3,1, 0);
        D2flux.set(i,4,4,4,1, 0);
        D2flux.set(i,4,4,5,1, 0);
        D2flux.set(i,4,5,1,1, 0);
        D2flux.set(i,4,5,2,1, 0);
        D2flux.set(i,4,5,3,1, 0);
        D2flux.set(i,4,5,4,1, 0);
        D2flux.set(i,4,5,5,1, 0);

        D2flux.set(i,5,1,1,1, 2*gamma*q2*q5/pow( q1, 3 ) - 3*gamma*pow( q2, 3 )/pow( q1, 4 ) - 3*gamma*q2*pow( q3, 2 )/pow( q1, 4 ) - 3*gamma*q2*pow( q4, 2 )/pow( q1, 4 ) + 3*pow( q2, 3 )/pow( q1, 4 ) + 3*q2*pow( q3, 2 )/pow( q1, 4 ) + 3*q2*pow( q4, 2 )/pow( q1, 4 ));
        D2flux.set(i,5,1,2,1, -gamma*q5/pow( q1, 2 ) + 3*gamma*pow( q2, 2 )/pow( q1, 3 ) + gamma*pow( q3, 2 )/pow( q1, 3 ) + gamma*pow( q4, 2 )/pow( q1, 3 ) - 3*pow( q2, 2 )/pow( q1, 3 ) - pow( q3, 2 )/pow( q1, 3 ) - pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,5,1,3,1, 2*gamma*q2*q3/pow( q1, 3 ) - 2*q2*q3/pow( q1, 3 ));
        D2flux.set(i,5,1,4,1, 2*gamma*q2*q4/pow( q1, 3 ) - 2*q2*q4/pow( q1, 3 ));
        D2flux.set(i,5,1,5,1, -gamma*q2/pow( q1, 2 ));
        D2flux.set(i,5,2,1,1, -gamma*q5/pow( q1, 2 ) + 3*gamma*pow( q2, 2 )/pow( q1, 3 ) + gamma*pow( q3, 2 )/pow( q1, 3 ) + gamma*pow( q4, 2 )/pow( q1, 3 ) - 3*pow( q2, 2 )/pow( q1, 3 ) - pow( q3, 2 )/pow( q1, 3 ) - pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,5,2,2,1, -3*gamma*q2/pow( q1, 2 ) + 3*q2/pow( q1, 2 ));
        D2flux.set(i,5,2,3,1, -gamma*q3/pow( q1, 2 ) + q3/pow( q1, 2 ));
        D2flux.set(i,5,2,4,1, -gamma*q4/pow( q1, 2 ) + q4/pow( q1, 2 ));
        D2flux.set(i,5,2,5,1, gamma/q1);
        D2flux.set(i,5,3,1,1, 2*gamma*q2*q3/pow( q1, 3 ) - 2*q2*q3/pow( q1, 3 ));
        D2flux.set(i,5,3,2,1, -gamma*q3/pow( q1, 2 ) + q3/pow( q1, 2 ));
        D2flux.set(i,5,3,3,1, -gamma*q2/pow( q1, 2 ) + q2/pow( q1, 2 ));
        D2flux.set(i,5,3,4,1, 0);
        D2flux.set(i,5,3,5,1, 0);
        D2flux.set(i,5,4,1,1, 2*gamma*q2*q4/pow( q1, 3 ) - 2*q2*q4/pow( q1, 3 ));
        D2flux.set(i,5,4,2,1, -gamma*q4/pow( q1, 2 ) + q4/pow( q1, 2 ));
        D2flux.set(i,5,4,3,1, 0);
        D2flux.set(i,5,4,4,1, -gamma*q2/pow( q1, 2 ) + q2/pow( q1, 2 ));
        D2flux.set(i,5,4,5,1, 0);
        D2flux.set(i,5,5,1,1, -gamma*q2/pow( q1, 2 ));
        D2flux.set(i,5,5,2,1, gamma/q1);
        D2flux.set(i,5,5,3,1, 0);
        D2flux.set(i,5,5,4,1, 0);
        D2flux.set(i,5,5,5,1, 0);

        //Computing the Hessian of the flux function: g''(q)

        D2flux.set(i,1,1,1,2, 0);
        D2flux.set(i,1,1,2,2, 0);
        D2flux.set(i,1,1,3,2, 0);
        D2flux.set(i,1,1,4,2, 0);
        D2flux.set(i,1,1,5,2, 0);
        D2flux.set(i,1,2,1,2, 0);
        D2flux.set(i,1,2,2,2, 0);
        D2flux.set(i,1,2,3,2, 0);
        D2flux.set(i,1,2,4,2, 0);
        D2flux.set(i,1,2,5,2, 0);
        D2flux.set(i,1,3,1,2, 0);
        D2flux.set(i,1,3,2,2, 0);
        D2flux.set(i,1,3,3,2, 0);
        D2flux.set(i,1,3,4,2, 0);
        D2flux.set(i,1,3,5,2, 0);
        D2flux.set(i,1,4,1,2, 0);
        D2flux.set(i,1,4,2,2, 0);
        D2flux.set(i,1,4,3,2, 0);
        D2flux.set(i,1,4,4,2, 0);
        D2flux.set(i,1,4,5,2, 0);
        D2flux.set(i,1,5,1,2, 0);
        D2flux.set(i,1,5,2,2, 0);
        D2flux.set(i,1,5,3,2, 0);
        D2flux.set(i,1,5,4,2, 0);
        D2flux.set(i,1,5,5,2, 0);

        D2flux.set(i,2,1,1,2, 2*q2*q3/pow( q1, 3 ));
        D2flux.set(i,2,1,2,2, -q3/pow( q1, 2 ));
        D2flux.set(i,2,1,3,2, -q2/pow( q1, 2 ));
        D2flux.set(i,2,1,4,2, 0);
        D2flux.set(i,2,1,5,2, 0);
        D2flux.set(i,2,2,1,2, -q3/pow( q1, 2 ));
        D2flux.set(i,2,2,2,2, 0);
        D2flux.set(i,2,2,3,2, 1/q1);
        D2flux.set(i,2,2,4,2, 0);
        D2flux.set(i,2,2,5,2, 0);
        D2flux.set(i,2,3,1,2, -q2/pow( q1, 2 ));
        D2flux.set(i,2,3,2,2, 1/q1);
        D2flux.set(i,2,3,3,2, 0);
        D2flux.set(i,2,3,4,2, 0);
        D2flux.set(i,2,3,5,2, 0);
        D2flux.set(i,2,4,1,2, 0);
        D2flux.set(i,2,4,2,2, 0);
        D2flux.set(i,2,4,3,2, 0);
        D2flux.set(i,2,4,4,2, 0);
        D2flux.set(i,2,4,5,2, 0);
        D2flux.set(i,2,5,1,2, 0);
        D2flux.set(i,2,5,2,2, 0);
        D2flux.set(i,2,5,3,2, 0);
        D2flux.set(i,2,5,4,2, 0);
        D2flux.set(i,2,5,5,2, 0);

        D2flux.set(i,3,1,1,2, -gamma*pow( q2, 2 )/pow( q1, 3 ) - gamma*pow( q3, 2 )/pow( q1, 3 ) - gamma*pow( q4, 2 )/pow( q1, 3 ) + pow( q2, 2 )/pow( q1, 3 ) + 3*pow( q3, 2 )/pow( q1, 3 ) + pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,3,1,2,2, gamma*q2/pow( q1, 2 ) - q2/pow( q1, 2 ));
        D2flux.set(i,3,1,3,2, gamma*q3/pow( q1, 2 ) - 3*q3/pow( q1, 2 ));
        D2flux.set(i,3,1,4,2, gamma*q4/pow( q1, 2 ) - q4/pow( q1, 2 ));
        D2flux.set(i,3,1,5,2, 0);
        D2flux.set(i,3,2,1,2, gamma*q2/pow( q1, 2 ) - q2/pow( q1, 2 ));
        D2flux.set(i,3,2,2,2, -gamma/q1 + 1/q1);
        D2flux.set(i,3,2,3,2, 0);
        D2flux.set(i,3,2,4,2, 0);
        D2flux.set(i,3,2,5,2, 0);
        D2flux.set(i,3,3,1,2, gamma*q3/pow( q1, 2 ) - 3*q3/pow( q1, 2 ));
        D2flux.set(i,3,3,2,2, 0);
        D2flux.set(i,3,3,3,2, -gamma/q1 + 3/q1);
        D2flux.set(i,3,3,4,2, 0);
        D2flux.set(i,3,3,5,2, 0);
        D2flux.set(i,3,4,1,2, gamma*q4/pow( q1, 2 ) - q4/pow( q1, 2 ));
        D2flux.set(i,3,4,2,2, 0);
        D2flux.set(i,3,4,3,2, 0);
        D2flux.set(i,3,4,4,2, -gamma/q1 + 1/q1);
        D2flux.set(i,3,4,5,2, 0);
        D2flux.set(i,3,5,1,2, 0);
        D2flux.set(i,3,5,2,2, 0);
        D2flux.set(i,3,5,3,2, 0);
        D2flux.set(i,3,5,4,2, 0);
        D2flux.set(i,3,5,5,2, 0);

        D2flux.set(i,4,1,1,2, 2*q3*q4/pow( q1, 3 ));
        D2flux.set(i,4,1,2,2, 0);
        D2flux.set(i,4,1,3,2, -q4/pow( q1, 2 ));
        D2flux.set(i,4,1,4,2, -q3/pow( q1, 2 ));
        D2flux.set(i,4,1,5,2, 0);
        D2flux.set(i,4,2,1,2, 0);
        D2flux.set(i,4,2,2,2, 0);
        D2flux.set(i,4,2,3,2, 0);
        D2flux.set(i,4,2,4,2, 0);
        D2flux.set(i,4,2,5,2, 0);
        D2flux.set(i,4,3,1,2, -q4/pow( q1, 2 ));
        D2flux.set(i,4,3,2,2, 0);
        D2flux.set(i,4,3,3,2, 0);
        D2flux.set(i,4,3,4,2, 1/q1);
        D2flux.set(i,4,3,5,2, 0);
        D2flux.set(i,4,4,1,2, -q3/pow( q1, 2 ));
        D2flux.set(i,4,4,2,2, 0);
        D2flux.set(i,4,4,3,2, 1/q1);
        D2flux.set(i,4,4,4,2, 0);
        D2flux.set(i,4,4,5,2, 0);
        D2flux.set(i,4,5,1,2, 0);
        D2flux.set(i,4,5,2,2, 0);
        D2flux.set(i,4,5,3,2, 0);
        D2flux.set(i,4,5,4,2, 0);
        D2flux.set(i,4,5,5,2, 0);

        D2flux.set(i,5,1,1,2, 2*gamma*q3*q5/pow( q1, 3 ) - 3*gamma*pow( q2, 2 )*q3/pow( q1, 4 ) - 3*gamma*pow( q3, 3 )/pow( q1, 4 ) - 3*gamma*q3*pow( q4, 2 )/pow( q1, 4 ) + 3*pow( q2, 2 )*q3/pow( q1, 4 ) + 3*pow( q3, 3 )/pow( q1, 4 ) + 3*q3*pow( q4, 2 )/pow( q1, 4 ));
        D2flux.set(i,5,1,2,2, 2*gamma*q2*q3/pow( q1, 3 ) - 2*q2*q3/pow( q1, 3 ));
        D2flux.set(i,5,1,3,2, -gamma*q5/pow( q1, 2 ) + gamma*pow( q2, 2 )/pow( q1, 3 ) + 3*gamma*pow( q3, 2 )/pow( q1, 3 ) + gamma*pow( q4, 2 )/pow( q1, 3 ) - pow( q2, 2 )/pow( q1, 3 ) - 3*pow( q3, 2 )/pow( q1, 3 ) - pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,5,1,4,2, 2*gamma*q3*q4/pow( q1, 3 ) - 2*q3*q4/pow( q1, 3 ));
        D2flux.set(i,5,1,5,2, -gamma*q3/pow( q1, 2 ));
        D2flux.set(i,5,2,1,2, 2*gamma*q2*q3/pow( q1, 3 ) - 2*q2*q3/pow( q1, 3 ));
        D2flux.set(i,5,2,2,2, -gamma*q3/pow( q1, 2 ) + q3/pow( q1, 2 ));
        D2flux.set(i,5,2,3,2, -gamma*q2/pow( q1, 2 ) + q2/pow( q1, 2 ));
        D2flux.set(i,5,2,4,2, 0);
        D2flux.set(i,5,2,5,2, 0);
        D2flux.set(i,5,3,1,2, -gamma*q5/pow( q1, 2 ) + gamma*pow( q2, 2 )/pow( q1, 3 ) + 3*gamma*pow( q3, 2 )/pow( q1, 3 ) + gamma*pow( q4, 2 )/pow( q1, 3 ) - pow( q2, 2 )/pow( q1, 3 ) - 3*pow( q3, 2 )/pow( q1, 3 ) - pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,5,3,2,2, -gamma*q2/pow( q1, 2 ) + q2/pow( q1, 2 ));
        D2flux.set(i,5,3,3,2, -3*gamma*q3/pow( q1, 2 ) + 3*q3/pow( q1, 2 ));
        D2flux.set(i,5,3,4,2, -gamma*q4/pow( q1, 2 ) + q4/pow( q1, 2 ));
        D2flux.set(i,5,3,5,2, gamma/q1);
        D2flux.set(i,5,4,1,2, 2*gamma*q3*q4/pow( q1, 3 ) - 2*q3*q4/pow( q1, 3 ));
        D2flux.set(i,5,4,2,2, 0);
        D2flux.set(i,5,4,3,2, -gamma*q4/pow( q1, 2 ) + q4/pow( q1, 2 ));
        D2flux.set(i,5,4,4,2, -gamma*q3/pow( q1, 2 ) + q3/pow( q1, 2 ));
        D2flux.set(i,5,4,5,2, 0);
        D2flux.set(i,5,5,1,2, -gamma*q3/pow( q1, 2 ));
        D2flux.set(i,5,5,2,2, 0);
        D2flux.set(i,5,5,3,2, gamma/q1);
        D2flux.set(i,5,5,4,2, 0);
        D2flux.set(i,5,5,5,2, 0);

        //Computing the Hessian of the flux function: h''(q)

        D2flux.set(i,1,1,1,3, 0);
        D2flux.set(i,1,1,2,3, 0);
        D2flux.set(i,1,1,3,3, 0);
        D2flux.set(i,1,1,4,3, 0);
        D2flux.set(i,1,1,5,3, 0);
        D2flux.set(i,1,2,1,3, 0);
        D2flux.set(i,1,2,2,3, 0);
        D2flux.set(i,1,2,3,3, 0);
        D2flux.set(i,1,2,4,3, 0);
        D2flux.set(i,1,2,5,3, 0);
        D2flux.set(i,1,3,1,3, 0);
        D2flux.set(i,1,3,2,3, 0);
        D2flux.set(i,1,3,3,3, 0);
        D2flux.set(i,1,3,4,3, 0);
        D2flux.set(i,1,3,5,3, 0);
        D2flux.set(i,1,4,1,3, 0);
        D2flux.set(i,1,4,2,3, 0);
        D2flux.set(i,1,4,3,3, 0);
        D2flux.set(i,1,4,4,3, 0);
        D2flux.set(i,1,4,5,3, 0);
        D2flux.set(i,1,5,1,3, 0);
        D2flux.set(i,1,5,2,3, 0);
        D2flux.set(i,1,5,3,3, 0);
        D2flux.set(i,1,5,4,3, 0);
        D2flux.set(i,1,5,5,3, 0);

        D2flux.set(i,2,1,1,3, 2*q2*q4/pow( q1, 3 ));
        D2flux.set(i,2,1,2,3, -q4/pow( q1, 2 ));
        D2flux.set(i,2,1,3,3, 0);
        D2flux.set(i,2,1,4,3, -q2/pow( q1, 2 ));
        D2flux.set(i,2,1,5,3, 0);
        D2flux.set(i,2,2,1,3, -q4/pow( q1, 2 ));
        D2flux.set(i,2,2,2,3, 0);
        D2flux.set(i,2,2,3,3, 0);
        D2flux.set(i,2,2,4,3, 1/q1);
        D2flux.set(i,2,2,5,3, 0);
        D2flux.set(i,2,3,1,3, 0);
        D2flux.set(i,2,3,2,3, 0);
        D2flux.set(i,2,3,3,3, 0);
        D2flux.set(i,2,3,4,3, 0);
        D2flux.set(i,2,3,5,3, 0);
        D2flux.set(i,2,4,1,3, -q2/pow( q1, 2 ));
        D2flux.set(i,2,4,2,3, 1/q1);
        D2flux.set(i,2,4,3,3, 0);
        D2flux.set(i,2,4,4,3, 0);
        D2flux.set(i,2,4,5,3, 0);
        D2flux.set(i,2,5,1,3, 0);
        D2flux.set(i,2,5,2,3, 0);
        D2flux.set(i,2,5,3,3, 0);
        D2flux.set(i,2,5,4,3, 0);
        D2flux.set(i,2,5,5,3, 0);

        D2flux.set(i,3,1,1,3, 2*q3*q4/pow( q1, 3 ));
        D2flux.set(i,3,1,2,3, 0);
        D2flux.set(i,3,1,3,3, -q4/pow( q1, 2 ));
        D2flux.set(i,3,1,4,3, -q3/pow( q1, 2 ));
        D2flux.set(i,3,1,5,3, 0);
        D2flux.set(i,3,2,1,3, 0);
        D2flux.set(i,3,2,2,3, 0);
        D2flux.set(i,3,2,3,3, 0);
        D2flux.set(i,3,2,4,3, 0);
        D2flux.set(i,3,2,5,3, 0);
        D2flux.set(i,3,3,1,3, -q4/pow( q1, 2 ));
        D2flux.set(i,3,3,2,3, 0);
        D2flux.set(i,3,3,3,3, 0);
        D2flux.set(i,3,3,4,3, 1/q1);
        D2flux.set(i,3,3,5,3, 0);
        D2flux.set(i,3,4,1,3, -q3/pow( q1, 2 ));
        D2flux.set(i,3,4,2,3, 0);
        D2flux.set(i,3,4,3,3, 1/q1);
        D2flux.set(i,3,4,4,3, 0);
        D2flux.set(i,3,4,5,3, 0);
        D2flux.set(i,3,5,1,3, 0);
        D2flux.set(i,3,5,2,3, 0);
        D2flux.set(i,3,5,3,3, 0);
        D2flux.set(i,3,5,4,3, 0);
        D2flux.set(i,3,5,5,3, 0);

        D2flux.set(i,4,1,1,3, -gamma*pow( q2, 2 )/pow( q1, 3 ) - gamma*pow( q3, 2 )/pow( q1, 3 ) - gamma*pow( q4, 2 )/pow( q1, 3 ) + pow( q2, 2 )/pow( q1, 3 ) + pow( q3, 2 )/pow( q1, 3 ) + 3*pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,4,1,2,3, gamma*q2/pow( q1, 2 ) - q2/pow( q1, 2 ));
        D2flux.set(i,4,1,3,3, gamma*q3/pow( q1, 2 ) - q3/pow( q1, 2 ));
        D2flux.set(i,4,1,4,3, gamma*q4/pow( q1, 2 ) - 3*q4/pow( q1, 2 ));
        D2flux.set(i,4,1,5,3, 0);
        D2flux.set(i,4,2,1,3, gamma*q2/pow( q1, 2 ) - q2/pow( q1, 2 ));
        D2flux.set(i,4,2,2,3, -gamma/q1 + 1/q1);
        D2flux.set(i,4,2,3,3, 0);
        D2flux.set(i,4,2,4,3, 0);
        D2flux.set(i,4,2,5,3, 0);
        D2flux.set(i,4,3,1,3, gamma*q3/pow( q1, 2 ) - q3/pow( q1, 2 ));
        D2flux.set(i,4,3,2,3, 0);
        D2flux.set(i,4,3,3,3, -gamma/q1 + 1/q1);
        D2flux.set(i,4,3,4,3, 0);
        D2flux.set(i,4,3,5,3, 0);
        D2flux.set(i,4,4,1,3, gamma*q4/pow( q1, 2 ) - 3*q4/pow( q1, 2 ));
        D2flux.set(i,4,4,2,3, 0);
        D2flux.set(i,4,4,3,3, 0);
        D2flux.set(i,4,4,4,3, -gamma/q1 + 3/q1);
        D2flux.set(i,4,4,5,3, 0);
        D2flux.set(i,4,5,1,3, 0);
        D2flux.set(i,4,5,2,3, 0);
        D2flux.set(i,4,5,3,3, 0);
        D2flux.set(i,4,5,4,3, 0);
        D2flux.set(i,4,5,5,3, 0);

        D2flux.set(i,5,1,1,3, 2*gamma*q4*q5/pow( q1, 3 ) - 3*gamma*pow( q2, 2 )*q4/pow( q1, 4 ) - 3*gamma*pow( q3, 2 )*q4/pow( q1, 4 ) - 3*gamma*pow( q4, 3 )/pow( q1, 4 ) + 3*pow( q2, 2 )*q4/pow( q1, 4 ) + 3*pow( q3, 2 )*q4/pow( q1, 4 ) + 3*pow( q4, 3 )/pow( q1, 4 ));
        D2flux.set(i,5,1,2,3, 2*gamma*q2*q4/pow( q1, 3 ) - 2*q2*q4/pow( q1, 3 ));
        D2flux.set(i,5,1,3,3, 2*gamma*q3*q4/pow( q1, 3 ) - 2*q3*q4/pow( q1, 3 ));
        D2flux.set(i,5,1,4,3, -gamma*q5/pow( q1, 2 ) + gamma*pow( q2, 2 )/pow( q1, 3 ) + gamma*pow( q3, 2 )/pow( q1, 3 ) + 3*gamma*pow( q4, 2 )/pow( q1, 3 ) - pow( q2, 2 )/pow( q1, 3 ) - pow( q3, 2 )/pow( q1, 3 ) - 3*pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,5,1,5,3, -gamma*q4/pow( q1, 2 ));
        D2flux.set(i,5,2,1,3, 2*gamma*q2*q4/pow( q1, 3 ) - 2*q2*q4/pow( q1, 3 ));
        D2flux.set(i,5,2,2,3, -gamma*q4/pow( q1, 2 ) + q4/pow( q1, 2 ));
        D2flux.set(i,5,2,3,3, 0);
        D2flux.set(i,5,2,4,3, -gamma*q2/pow( q1, 2 ) + q2/pow( q1, 2 ));
        D2flux.set(i,5,2,5,3, 0);
        D2flux.set(i,5,3,1,3, 2*gamma*q3*q4/pow( q1, 3 ) - 2*q3*q4/pow( q1, 3 ));
        D2flux.set(i,5,3,2,3, 0);
        D2flux.set(i,5,3,3,3, -gamma*q4/pow( q1, 2 ) + q4/pow( q1, 2 ));
        D2flux.set(i,5,3,4,3, -gamma*q3/pow( q1, 2 ) + q3/pow( q1, 2 ));
        D2flux.set(i,5,3,5,3, 0);
        D2flux.set(i,5,4,1,3, -gamma*q5/pow( q1, 2 ) + gamma*pow( q2, 2 )/pow( q1, 3 ) + gamma*pow( q3, 2 )/pow( q1, 3 ) + 3*gamma*pow( q4, 2 )/pow( q1, 3 ) - pow( q2, 2 )/pow( q1, 3 ) - pow( q3, 2 )/pow( q1, 3 ) - 3*pow( q4, 2 )/pow( q1, 3 ));
        D2flux.set(i,5,4,2,3, -gamma*q2/pow( q1, 2 ) + q2/pow( q1, 2 ));
        D2flux.set(i,5,4,3,3, -gamma*q3/pow( q1, 2 ) + q3/pow( q1, 2 ));
        D2flux.set(i,5,4,4,3, -3*gamma*q4/pow( q1, 2 ) + 3*q4/pow( q1, 2 ));
        D2flux.set(i,5,4,5,3, gamma/q1);
        D2flux.set(i,5,5,1,3, -gamma*q4/pow( q1, 2 ));
        D2flux.set(i,5,5,2,3, 0);
        D2flux.set(i,5,5,3,3, 0);
        D2flux.set(i,5,5,4,3, gamma/q1);
        D2flux.set(i,5,5,5,3, 0);
    }

}
