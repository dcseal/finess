/// @file IniParams.cpp
/// Generated by /Users/seal/code/finess/python/finess/params/params.py

#include "IniParams.h"

#include "util.h"
#include "IniParser.h"

#include <fstream>
#include <string>

IniParams global_ini_params;


void IniParams::init(const std::string& inputFilename){
    using std::string;
    
    IniParser parser;
    {
        std::ifstream ifs(inputFilename.c_str());
	std::string ini_file_content = read_entire_stream(ifs);
	int parse_return_value = parser.parse(ini_file_content);
	if(parse_return_value != 0)
	    terminate("Error parsing " + inputFilename + ": line #" +
	              anyToString(parse_return_value));
    }

    this->ini_doc = parser.get_ini_doc();

// Defining code for member variables


    string global_alpha_str = this->ini_doc["finess"]["global_alpha"];
    
    if(global_alpha_str == ""){
        global_alpha_str = "false";
	this->ini_doc["finess"]["global_alpha"] = "false";
    }
        
    
    this->global_alpha = stringToAny<bool>(global_alpha_str);
        
    

    string mpp_limiter_str = this->ini_doc["finess"]["mpp_limiter"];
    
    if(mpp_limiter_str == ""){
        mpp_limiter_str = "false";
	this->ini_doc["finess"]["mpp_limiter"] = "false";
    }
        
    
    this->mpp_limiter = stringToAny<bool>(mpp_limiter_str);
        
    

    string output_dir_str = this->ini_doc["finess"]["output_dir"];
    
    if(output_dir_str == ""){
        output_dir_str = "output";
	this->ini_doc["finess"]["output_dir"] = "output";
    }
        
    
    this->output_dir = stringToAny<std::string>(output_dir_str);
        
    

    string ndims_str = this->ini_doc["finess"]["ndims"];
    
    if(ndims_str == "")
        terminate("finess.ndims is missing.");
    
    
    this->ndims = stringToAny<int>(ndims_str);
        
    

    string nout_str = this->ini_doc["finess"]["nout"];
    
    if(nout_str == ""){
        nout_str = "1";
	this->ini_doc["finess"]["nout"] = "1";
    }
        
    
    this->nout = stringToAny<int>(nout_str);
        
    

    string tfinal_str = this->ini_doc["finess"]["tfinal"];
    
    if(tfinal_str == "")
        terminate("finess.tfinal is missing.");
    
    
    this->tfinal = stringToAny<double>(tfinal_str);
        
    

    string initial_dt_str = this->ini_doc["finess"]["initial_dt"];
    
    if(initial_dt_str == "")
        terminate("finess.initial_dt is missing.");
    
    
    this->initial_dt = stringToAny<double>(initial_dt_str);
        
    

    string max_dt_str = this->ini_doc["finess"]["max_dt"];
    
    if(max_dt_str == "")
        terminate("finess.max_dt is missing.");
    
    
    this->max_dt = stringToAny<double>(max_dt_str);
        
    

    string desired_cfl_str = this->ini_doc["finess"]["desired_cfl"];
    
    if(desired_cfl_str == "")
        terminate("finess.desired_cfl is missing.");
    
    
    this->desired_cfl = stringToAny<double>(desired_cfl_str);
        
    

    string max_cfl_str = this->ini_doc["finess"]["max_cfl"];
    
    if(max_cfl_str == "")
        terminate("finess.max_cfl is missing.");
    
    
    this->max_cfl = stringToAny<double>(max_cfl_str);
        
    

    string nv_str = this->ini_doc["finess"]["nv"];
    
    if(nv_str == "")
        terminate("finess.nv is missing.");
    
    
    this->nv = stringToAny<int>(nv_str);
        
    

    string time_stepping_method_str = this->ini_doc["finess"]["time_stepping_method"];
    
    if(time_stepping_method_str == "")
        terminate("finess.time_stepping_method is missing.");
    
    
    this->time_stepping_method = stringToAny<IniParams::TimeSteppingMethod::enum_type>(time_stepping_method_str);
        
    
    if(this->time_stepping_method == IniParams::TimeSteppingMethod::DEFAULT)
        terminate("finess.time_stepping_method should be one of the following: SDC, Runge-Kutta, Lax-Wendroff, User-Defined, Multiderivative.");
               

    string space_order_str = this->ini_doc["finess"]["space_order"];
    
    if(space_order_str == "")
        terminate("finess.space_order is missing.");
    
    
    this->space_order = stringToAny<int>(space_order_str);
        
    

    string time_order_str = this->ini_doc["finess"]["time_order"];
    
    if(time_order_str == "")
        terminate("finess.time_order is missing.");
    
    
    this->time_order = stringToAny<int>(time_order_str);
        
    

    string verbosity_str = this->ini_doc["finess"]["verbosity"];
    
    if(verbosity_str == "")
        terminate("finess.verbosity is missing.");
    
    
    this->verbosity = stringToAny<int>(verbosity_str);
        
    

    string mcapa_str = this->ini_doc["finess"]["mcapa"];
    
    if(mcapa_str == "")
        terminate("finess.mcapa is missing.");
    
    
    this->mcapa = stringToAny<int>(mcapa_str);
        
    

    string maux_str = this->ini_doc["finess"]["maux"];
    
    if(maux_str == "")
        terminate("finess.maux is missing.");
    
    
    this->maux = stringToAny<int>(maux_str);
        
    

    string source_term_str = this->ini_doc["finess"]["source_term"];
    
    if(source_term_str == "")
        terminate("finess.source_term is missing.");
    
    
    this->source_term = stringToAny<bool>(source_term_str);
        
    

    string meqn_str = this->ini_doc["finess"]["meqn"];
    
    if(meqn_str == "")
        terminate("finess.meqn is missing.");
    
    
    this->meqn = stringToAny<int>(meqn_str);
        
    

    string weno_version_str = this->ini_doc["weno"]["weno_version"];
    
    if(weno_version_str == ""){
        weno_version_str = "JS";
	this->ini_doc["weno"]["weno_version"] = "JS";
    }
        
    
    this->weno_version = stringToAny<IniParams::WenoVersion::enum_type>(weno_version_str);
        
    
    if(this->weno_version == IniParams::WenoVersion::DEFAULT)
        terminate("weno.weno_version should be one of the following: Z, FD, JS.");
               

    string power_param_str = this->ini_doc["weno"]["power_param"];
    
    if(power_param_str == ""){
        power_param_str = "2.0";
	this->ini_doc["weno"]["power_param"] = "2.0";
    }
        
    
    this->power_param = stringToAny<double>(power_param_str);
        
    

    string alpha_scaling_str = this->ini_doc["weno"]["alpha_scaling"];
    
    if(alpha_scaling_str == ""){
        alpha_scaling_str = "1.1";
	this->ini_doc["weno"]["alpha_scaling"] = "1.1";
    }
        
    
    this->alpha_scaling = stringToAny<double>(alpha_scaling_str);
        
    

    string epsilon_str = this->ini_doc["weno"]["epsilon"];
    
    if(epsilon_str == ""){
        epsilon_str = "1e-06";
	this->ini_doc["weno"]["epsilon"] = "1e-06";
    }
        
    
    this->epsilon = stringToAny<double>(epsilon_str);
        
    

    string mx_str = this->ini_doc["grid"]["mx"];
    
    if(mx_str == "")
        terminate("grid.mx is missing.");
    
    
    this->mx = stringToAny<int>(mx_str);
        
    

    string mbc_str = this->ini_doc["grid"]["mbc"];
    
    if(mbc_str == "")
        terminate("grid.mbc is missing.");
    
    
    this->mbc = stringToAny<int>(mbc_str);
        
    

    string xlow_str = this->ini_doc["grid"]["xlow"];
    
    if(xlow_str == "")
        terminate("grid.xlow is missing.");
    
    
    this->xlow = stringToAny<double>(xlow_str);
        
    

    string xhigh_str = this->ini_doc["grid"]["xhigh"];
    
    if(xhigh_str == "")
        terminate("grid.xhigh is missing.");
    
    
    this->xhigh = stringToAny<double>(xhigh_str);
        
    
    this->dx = (this->xhigh - this->xlow) / this->mx;

    string gamma_str = this->ini_doc["euler"]["gamma"];
    
    if(gamma_str == ""){
        gamma_str = "1.4";
	this->ini_doc["euler"]["gamma"] = "1.4";
    }
        
    
    this->gamma = stringToAny<double>(gamma_str);
        
    
// Checks

    if(ndims != 1 &&
       ndims != 2 &&
       ndims != 3)
            terminate("ndims is not one of [1, 2, 3].");


    if(!(this->nout > 0))
        terminate("nout should be > 0.");


    if(!(this->tfinal >= 0.0))
        terminate("tfinal should be >= 0.0.");


    if(!(this->initial_dt > 0.0))
        terminate("initial_dt should be > 0.0.");

if(!(this->max_dt >= this->initial_dt))
        terminate("finess.max_dt should > finess.initial_dt");
    

    if(!(this->desired_cfl > 0.0))
        terminate("desired_cfl should be > 0.0.");

if(!(this->max_cfl >= this->desired_cfl))
        terminate("finess.max_cfl should > this->desired_cfl");
    

    if(!(this->nv > 0))
        terminate("nv should be > 0.");

    if(space_order != 1 &&
       space_order != 3 &&
       space_order != 5 &&
       space_order != 7 &&
       space_order != 9 &&
       space_order != 11)
            terminate("space_order is not one of [1, 3, 5, 7, 9, 11].");

    if(time_order != 1 &&
       time_order != 2 &&
       time_order != 3 &&
       time_order != 4 &&
       time_order != 5)
            terminate("time_order is not one of [1, 2, 3, 4, 5].");

    if(verbosity != 0 &&
       verbosity != 1)
            terminate("verbosity is not one of [0, 1].");


    if(!(this->mcapa >= 0))
        terminate("mcapa should be >= 0.");

if(!(this->maux >= this->mcapa))
        terminate("finess.maux should >= finess.mcapa");
    

    if(!(this->meqn >= 1))
        terminate("meqn should be >= 1.");


    if(!(this->alpha_scaling >= 1.0))
        terminate("alpha_scaling should be >= 1.0.");


    if(!(this->epsilon > 0.0))
        terminate("epsilon should be > 0.0.");


    if(!(this->mx > 0))
        terminate("mx should be > 0.");


    if(!(this->mbc >= 0))
        terminate("mbc should be >= 0.");

if(!(xhigh > xlow))
        terminate("grid.xhigh should > grid.xlow.");

    if(!(this->gamma > 0.0))
        terminate("gamma should be > 0.0.");


}

