#ifndef _INIPARAMS_H_
#define _INIPARAMS_H_
/// @file IniParams.h
/// Generated by /Users/tangqi/Documents/upload/finesswithoutpp/finess/python/finess/params/params.py
    

#include <string>
#include "util.h"
#include "IniParser.h"

class IniParams;
extern IniParams global_ini_params;


class IniParams{
public:
    void init(const std::string& inputFilename);
private:
    IniParser::ini_doc_type ini_doc;
public:
    std::string ini_doc_as_string(){
        return IniParser::ini_doc_as_string(this->ini_doc);
    }
// Type definitions 
public:
        struct WenoVersion{
            enum enum_type {Z, FD, JS, DEFAULT};
        };
        
public:
        struct TimeSteppingMethod{
            enum enum_type {SDC, RK, LxW, USER_DEFINED, MD, DEFAULT};
        };
        

// Member variables declarations
private:
        bool global_alpha;
        
private:
        bool mpp_limiter;
        
private:
        std::string output_dir;
        
private:
        int ndims;
        
private:
        int nout;
        
private:
        double tfinal;
        
private:
        double initial_dt;
        
private:
        double max_dt;
        
private:
        double desired_cfl;
        
private:
        double max_cfl;
        
private:
        int nv;
        
private:
        IniParams::TimeSteppingMethod::enum_type time_stepping_method;
        
private:
        int space_order;
        
private:
        int time_order;
        
private:
        int verbosity;
        
private:
        int mcapa;
        
private:
        int maux;
        
private:
        bool source_term;
        
private:
        int meqn;
        
private:
        IniParams::WenoVersion::enum_type weno_version;
        
private:
        double power_param;
        
private:
        double alpha_scaling;
        
private:
        double epsilon;
        
private:
        int mx;
        
private:
        int mbc;
        
private:
        double xlow;
        
private:
        double xhigh;
        
private:
        double dx;
        
private:
        double gamma;
        

// Accessor definitions
public:
        inline bool get_global_alpha(){
            return this->global_alpha;
        }
        
public:
        inline bool get_mpp_limiter(){
            return this->mpp_limiter;
        }
        
public:
        inline std::string get_output_dir(){
            return this->output_dir;
        }
        
public:
        inline int get_ndims(){
            return this->ndims;
        }
        
public:
        inline int get_nout(){
            return this->nout;
        }
        
public:
        inline double get_tfinal(){
            return this->tfinal;
        }
        
public:
        inline double get_initial_dt(){
            return this->initial_dt;
        }
        
public:
        inline double get_max_dt(){
            return this->max_dt;
        }
        
public:
        inline double get_desired_cfl(){
            return this->desired_cfl;
        }
        
public:
        inline double get_max_cfl(){
            return this->max_cfl;
        }
        
public:
        inline int get_nv(){
            return this->nv;
        }
        
public:
        inline IniParams::TimeSteppingMethod::enum_type get_time_stepping_method(){
            return this->time_stepping_method;
        }
        
public:
        inline int get_space_order(){
            return this->space_order;
        }
        
public:
        inline int get_time_order(){
            return this->time_order;
        }
        
public:
        inline int get_verbosity(){
            return this->verbosity;
        }
        
public:
        inline int get_mcapa(){
            return this->mcapa;
        }
        
public:
        inline int get_maux(){
            return this->maux;
        }
        
public:
        inline bool get_source_term(){
            return this->source_term;
        }
        
public:
        inline int get_meqn(){
            return this->meqn;
        }
        
public:
        inline IniParams::WenoVersion::enum_type get_weno_version(){
            return this->weno_version;
        }
        
public:
        inline double get_power_param(){
            return this->power_param;
        }
        
public:
        inline double get_alpha_scaling(){
            return this->alpha_scaling;
        }
        
public:
        inline double get_epsilon(){
            return this->epsilon;
        }
        
public:
        inline int get_mx(){
            return this->mx;
        }
        
public:
        inline int get_mbc(){
            return this->mbc;
        }
        
public:
        inline double get_xlow(){
            return this->xlow;
        }
        
public:
        inline double get_xhigh(){
            return this->xhigh;
        }
        
public:
        inline double get_dx(){
            return this->dx;
        }
        
public:
        inline double get_gamma(){
            return this->gamma;
        }
        
};
//stringToAny specializations
template<>
inline IniParams::WenoVersion::enum_type stringToAny<IniParams::WenoVersion::enum_type>(const std::string& s){
    return
        s == "Z" ? IniParams::WenoVersion::Z :
        s == "FD" ? IniParams::WenoVersion::FD :
        s == "JS" ? IniParams::WenoVersion::JS :
        IniParams::WenoVersion::DEFAULT;
        
}
        
template<>
inline IniParams::TimeSteppingMethod::enum_type stringToAny<IniParams::TimeSteppingMethod::enum_type>(const std::string& s){
    return
        s == "SDC" ? IniParams::TimeSteppingMethod::SDC :
        s == "Runge-Kutta" ? IniParams::TimeSteppingMethod::RK :
        s == "Lax-Wendroff" ? IniParams::TimeSteppingMethod::LxW :
        s == "User-Defined" ? IniParams::TimeSteppingMethod::USER_DEFINED :
        s == "Multiderivative" ? IniParams::TimeSteppingMethod::MD :
        IniParams::TimeSteppingMethod::DEFAULT;
        
}
        
#endif
