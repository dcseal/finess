"""
This module provides functions for plotting generic 2D applicatinos in
FINESS.  This is the primary module that gets imported by plot2d_generic.py.
The funciton ask_which_component_and_which_frame_and_plot_wireframe is the
primary interface for executing the 2D python plotting interface for FINESS.

See also: TODO.
"""

from __future__ import absolute_import

def ask_which_component_and_which_frame_and_plot_wireframe(parameters_ini_filename):
    """Call this and you get an interactive plot program as the
    function name suggests."""
    from finess.params.util import read_params
    from generate_iniparams import parameter_list
    from finess.viz import ask_which_component, interactive_plot
    from mpl_toolkits.mplot3d import Axes3D
    from finess.viz.dim2 import draw_ith_frame_jth_component
    
    params = read_params(parameters_ini_filename, parameter_list)
    
    component = ask_which_component(params)
    
    draw_ith_frame = \
        lambda fig, i: \
           draw_ith_frame_jth_component( \
             params = params, fig = fig, i = i, j = component,
             plotting_method_on_Axes3DSubplot = Axes3D.plot_wireframe)
    
    interactive_plot(params["finess", "nout"], 
                     draw_ith_frame = draw_ith_frame)
    

def meshgrid(params):
    """Returns meshgrid (a pair (X, Y)) that can be used for 2D plotting.
    params is what is returned by finess.params.util.read_params."""
    assert(params['finess', 'ndims'] == 2)
    mx    = params['grid', 'mx']
    my    = params['grid', 'my']
    xlow  = params['grid', 'xlow']
    xhigh = params['grid', 'xhigh']
    ylow  = params['grid', 'ylow']
    yhigh = params['grid', 'yhigh']
    
    dx = (xhigh-xlow) / float(mx)
    dy = (yhigh-ylow) / float(my)
    
    from pylab import meshgrid, linspace
    try:
        X, Y = meshgrid(linspace(xlow + 0.5*dx, xhigh - 0.5*dx, mx), linspace(ylow + 0.5*dy, yhigh - 0.5*dy, my), indexing='ij' )
    except(TypeError):
        from pylab import transpose
        X, Y = meshgrid(linspace(xlow + 0.5*dx, xhigh - 0.5*dx, mx), linspace(ylow + 0.5*dy, yhigh - 0.5*dy, my) )
        X = transpose(X)
        Y = transpose(Y)
    return X,Y

def draw_ith_frame_jth_component(params, fig, i, j, 
                                 plotting_method_on_Axes3DSubplot):
    """Draws i-th frame, j-th component of q.
    params is what is returned by finess.params.util.read_params.
    The data to be plotted is generated by running finess.exe using the same
    config file (parameters.ini by default) that is read into params.
    fig is an instance of matplotlib.figure.Figure.
    plotting_method_on_Axes3D must be callable in this form:
      plotting_method_on_Axes3D(axes3d_obj, X, Y, Z)
    where axes3d_obj is an instance of matplotlib.axes.Axes3DSubplot,
          X, Y, Z are 2D-arrays, 
          X, Y are like what is returned by finess.viz.dim2.meshgrid,
          Z is of same shape as X and Y.
    Examples of plotting_method_on_Axes3D include
    mpl_tookits.mplot3d.Axes3D.{plot_wireframe, plot_surface, contour}
    """
    import matplotlib.figure 
    assert isinstance(fig, matplotlib.figure.Figure)

    from finess.dim2 import read_qa
    from finess.params.util import read_params

    t, q, aux = read_qa(params, i)

    from mpl_toolkits.mplot3d import Axes3D
    ax = fig.add_subplot(111, projection='3d')
    ax.set_title("$t = %(t)f$" % {"t": t})
    ax.set_xlabel("$x$")
    ax.set_ylabel("$y$")
    ax.set_zlabel("$z$")

    import finess.viz.dim2
    X, Y = finess.viz.dim2.meshgrid(params)
    plotting_method_on_Axes3DSubplot(ax, X, Y, q[:, :, j - 1])
 

